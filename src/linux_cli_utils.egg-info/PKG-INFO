Metadata-Version: 2.4
Name: linux-cli-utils
Version: 0.1.0
Summary: A collection of Python-based command line utilities for Linux
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: System Administrators
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Programming Language :: Python :: 3.12
Classifier: Topic :: System :: Systems Administration
Classifier: Topic :: Utilities
Requires-Python: >=3.6
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: click>=8.0.0
Requires-Dist: colorama>=0.4.0
Requires-Dist: psutil>=5.8.0
Requires-Dist: rich>=13.0.0
Requires-Dist: typer>=0.9.0
Provides-Extra: dev
Requires-Dist: pytest>=7.0.0; extra == "dev"
Requires-Dist: pytest-cov>=4.0.0; extra == "dev"
Requires-Dist: black>=22.0.0; extra == "dev"
Requires-Dist: flake8>=4.0.0; extra == "dev"
Requires-Dist: mypy>=0.950; extra == "dev"
Dynamic: license-file

# Linux CLI Utilities

A collection of Python-based command line utilities designed for openSUSE Linux and other Linux distributions. Perfect for your AI Lab setup!

## Features

- **System Information Tools**: Get detailed system information and hardware specs
- **File Management Utilities**: Advanced file operations and organization tools
- **Network Utilities**: Network monitoring and configuration helpers
- **Process Management**: Enhanced process monitoring and management tools
- **Backup & Snapshots**: Comprehensive Snapper-based backup utilities

## Quick Installation (Recommended)

For system-wide installation with automatic dependency management:

```bash
# Clone the repository
git clone <your-repo-url>
cd console_apps

# Install system-wide (requires sudo)
sudo ./install.sh

# Start using immediately
linux-utils --help
linux-sysinfo overview
```

## Manual Installation

1. Clone or download this project
2. Create a virtual environment (already configured):
   ```bash
   # Virtual environment is already set up at .venv/
   source .venv/bin/activate  # If needed
   ```
3. Install dependencies (already installed):
   ```bash
   pip install -r requirements.txt
   ```
4. Install the package in development mode (already done):
   ```bash
   pip install -e .
   ```

## System Commands (After Installation)

After running `sudo ./install.sh`, these commands will be available system-wide:

```bash
linux-utils --help              # Main CLI interface
linux-sysinfo overview          # System information
linux-filemanager ls -l         # File management
linux-nettools interfaces       # Network tools
linux-proctools top             # Process management
linux-backup list-snapshots     # Backup utilities

# View manual page
man linux-utils
```

## Quick Usage

The easiest way to use the utilities is through the `cli.sh` script:

```bash
./cli.sh help                    # Show available commands
./cli.sh sysinfo overview        # System overview
./cli.sh sysinfo memory          # Memory information
./cli.sh file ls -l              # Enhanced directory listing
./cli.sh net interfaces          # Network interfaces
./cli.sh proc top -l 10          # Top 10 processes
./cli.sh test                    # Run tests
```

## Detailed Usage

Each utility can be run directly using Python modules:

### System Information (`sysinfo`)

```bash
# System overview with CPU, memory, and system info
.venv/bin/python -m linux_cli_utils.sysinfo overview

# Detailed CPU information
.venv/bin/python -m linux_cli_utils.sysinfo cpu

# Memory and swap information
.venv/bin/python -m linux_cli_utils.sysinfo memory

# Disk usage information
.venv/bin/python -m linux_cli_utils.sysinfo disk

# Network interface information
.venv/bin/python -m linux_cli_utils.sysinfo network
```

### File Manager (`filemanager`)

```bash
# Enhanced directory listing
.venv/bin/python -m linux_cli_utils.filemanager ls -l

# Find files with pattern
.venv/bin/python -m linux_cli_utils.filemanager find -p "*.py"

# Directory tree view
.venv/bin/python -m linux_cli_utils.filemanager tree -d 3

# Disk usage analysis
.venv/bin/python -m linux_cli_utils.filemanager du -h
```

### Network Tools (`nettools`)

```bash
# Show network interfaces
.venv/bin/python -m linux_cli_utils.nettools interfaces

# Ping a host
.venv/bin/python -m linux_cli_utils.nettools ping google.com

# Scan ports on a host
.venv/bin/python -m linux_cli_utils.nettools portscan localhost -p "22,80,443"

# Show routing table
.venv/bin/python -m linux_cli_utils.nettools routes

# Network connection status
.venv/bin/python -m linux_cli_utils.nettools netstat
```

### Process Tools (`proctools`)

```bash
# List running processes
.venv/bin/python -m linux_cli_utils.proctools ps -l 20

# Top processes by CPU usage
.venv/bin/python -m linux_cli_utils.proctools top -l 10

# Detailed process information
.venv/bin/python -m linux_cli_utils.proctools info 1234

# Find processes by name
.venv/bin/python -m linux_cli_utils.proctools find firefox

# Kill a process
.venv/bin/python -m linux_cli_utils.proctools kill 1234

# Real-time process monitor
.venv/bin/python -m linux_cli_utils.proctools monitor
```

## VS Code Integration

This project is configured for VS Code with:

- **Tasks**: Use Ctrl+Shift+P → "Tasks: Run Task" to run predefined tasks
- **Debug Configurations**: Use F5 to debug individual utilities
- **Python Environment**: Automatically configured virtual environment
- **Tests**: Run with the "Run Tests" task or `./cli.sh test`

Available VS Code tasks:
- Run Linux CLI Utils
- System Info Overview
- File Manager List
- Network Interfaces
- Process Top
- Run Tests
- Format Code
- Install Package

## Development

### Running Tests

```bash
./cli.sh test
# or
.venv/bin/python -m pytest tests/ -v
```

### Code Formatting

```bash
./cli.sh format
# or
.venv/bin/python -m black src/ tests/
```

### Adding New Utilities

1. Create a new module in `src/linux_cli_utils/`
2. Follow the existing pattern using `typer` and `rich`
3. Add tests in `tests/`
4. Update the main CLI in `cli.py`
5. Add commands to `cli.sh`

## Requirements

## Requirements

- Python 3.6 or higher
- openSUSE Linux (or other Linux distribution with systemd)
- Basic development tools (gcc, make)

## Dependencies

- `typer` - Modern CLI framework
- `rich` - Beautiful terminal output
- `psutil` - System and process utilities
- `click` - Command line interface creation
- `colorama` - Cross-platform colored terminal text

## Project Structure

```
console_apps/
├── src/linux_cli_utils/     # Main package
│   ├── __init__.py
│   ├── cli.py              # Main CLI entry point
│   ├── utils.py            # Common utility functions
│   ├── sysinfo.py          # System information utilities
│   ├── filemanager.py      # File management utilities
│   ├── nettools.py         # Network utilities
│   ├── proctools.py        # Process management utilities
│   └── backup.py           # Backup and snapshot utilities
├── tests/                  # Test suite
├── .vscode/               # VS Code configuration
├── .github/               # GitHub and Copilot instructions
├── cli.sh                 # Quick command script
├── pyproject.toml         # Project configuration
├── requirements.txt       # Dependencies
└── README.md             # This file
```

## License

MIT License - see LICENSE file for details.

## AI Assistance

Parts of this script were assisted by AI tools, including:
- GitHub Copilot (code scaffolding and syntax help)
- Claude (logic suggestions and refactoring)

All output was reviewed and tested by me on openSUSE Linux.

### Installing the Man Page

After cloning this repository, you can install the man page as follows:

```sh
sudo cp man/cli_tool.1 /usr/local/share/man/man1/
sudo mandb
